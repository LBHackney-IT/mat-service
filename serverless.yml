service: mat-service

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-2
  api-name: hn-mat-service-api
  stage: ${opt:stage, env:SLS_STAGE, 'dev'}
  dbname: matServiceDb

plugins:
  - serverless-offline

functions:
  hn-mat-service:
    name: ${self:service}-${self:provider.stage}
    handler: src/lambda.handler
    events:
      - http:
          path: api/{proxy+}
          method: ANY
      - http: ANY /
      - http: ANY /{proxy+}

mat-service-single-view-api-authorizer:
  name: mat-service-single-view-api-authorizer-${self:provider.stage}
  role: arn:aws:iam::775052747630:role/LBH_Lambda_Execution
  handler: authorizer.handler
  package:
    include:
      - authorizer.js
      - node_modules/**
  environment:
    jwtsecret: ${ssm:/common/hackney-jwt-secret}
    allowedGroups: 'mat-service-singleview-beta'
    ENV: ${self:provider.stage}
    SENTRY_DSN: ${ssm:/hn-single-view-api/SENTRY_DSN}

resources:
  Resources:
    matServiceDbSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Access to Postgres
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '5432'
            ToPort: '5432'
            CidrIp: 0.0.0.0/0

    matServiceDb:
      Type: 'AWS::RDS::DBInstance'
      Properties:
        DBInstanceIdentifier: 'mat-service-db-${self:provider.stage}'
        DBName: ${self:provider.dbname}
        AllocatedStorage: 5
        DBInstanceClass: 'db.t2.micro'
        Engine: 'postgres'
        EngineVersion: '11.7'
        MasterUsername: ${ssm:/${self:provider.stage}-mat-service-db-MASTER_USERNAME}
        MasterUserPassword: ${ssm:/${self:provider.stage}-mat-service-db-MASTER_PASSWORD~true}
        VPCSecurityGroups:
          - Fn::GetAtt:
              - matServiceDbSecurityGroup
              - GroupId
      DeletionPolicy: 'Snapshot'
